name: Release

# 只在标签创建时触发
on:
  push:
    tags:
      - 'v*'

# 使用严格的并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 单一任务处理所有步骤，避免任务之间的并发问题
  build-and-release:
    # 避免自我触发
    if: "!contains(github.event.head_commit.message, 'skip ci') && github.event_name != 'workflow_run'"
    runs-on: windows-latest
    steps:
      - name: 检查是否有相同标签的工作流在运行
        run: |
          echo "标签: ${{ github.ref }}"
          echo "触发事件: ${{ github.event_name }}"
          
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 生成发布说明
        id: generate-release-notes
        shell: bash
        run: |
          # 获取当前标签与上一个标签
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # 获取版本号（去掉v前缀）
          VERSION=${CURRENT_TAG#v}
          
          # 获取当前日期
          RELEASE_DATE=$(date +"%Y-%m-%d")
          
          # 生成标题
          RELEASE_NOTES="${VERSION} (${RELEASE_DATE})"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "${RELEASE_NOTES}" >> $GITHUB_ENV
          
          echo "" >> $GITHUB_ENV
          echo "Break Change:" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # 生成新功能列表
          echo "New feature:" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          if [ -n "$PREVIOUS_TAG" ]; then
            git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:"%s" | grep -E "^feat" | sed -E 's/^feat(\([^)]+\))?:[ ]*/• /' >> $GITHUB_ENV || echo "• support multiple instance service" >> $GITHUB_ENV
          else
            echo "• support multiple instance service" >> $GITHUB_ENV
          fi
          
          echo "" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # 生成修复Bug列表
          echo "Bugs fixed:" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          if [ -n "$PREVIOUS_TAG" ]; then
            git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:"%s" | grep -E "^fix" | sed -E 's/^fix(\([^)]+\))?:[ ]*/• /' >> $GITHUB_ENV || echo "• recognize failed" >> $GITHUB_ENV
          else
            echo "• recognize failed" >> $GITHUB_ENV
          fi
          
          echo "EOF" >> $GITHUB_ENV
      
      - name: 创建发布
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            // 检查是否已存在此标签的release
            let tag = context.ref.replace('refs/tags/', '');
            console.log(`检查标签 ${tag} 是否已存在release`);
            
            try {
              // 尝试获取现有release
              const { data: existingRelease } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              
              console.log(`找到标签 ${tag} 的现有release，ID: ${existingRelease.id}`);
              return existingRelease.id;
            } catch (error) {
              console.log(`没有找到标签 ${tag} 的现有release，创建新的`);
              
              // 创建新release
              const { data } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: tag,
                body: process.env.RELEASE_NOTES,
                draft: true,
                prerelease: false
              });
              
              return data.id;
            }

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 获取pnpm缓存路径
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 设置pnpm缓存
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 设置Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: 安装依赖
        run: pnpm install

      - name: 构建应用
        run: pnpm run build

      - name: 构建Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ steps.create-release.outputs.result }}
          projectPath: "."

      - name: 运行更新器脚本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run updater

      - name: 发布Release
        uses: actions/github-script@v6
        env:
          release_id: ${{ steps.create-release.outputs.result }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            }) 
