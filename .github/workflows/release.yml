name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: windows-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: 生成发布说明
        id: generate-release-notes
        shell: bash
        run: |
          # 获取当前标签与上一个标签
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # 获取版本号（去掉v前缀）
          VERSION=${CURRENT_TAG#v}
          
          # 获取当前日期
          RELEASE_DATE=$(date +"%Y-%m-%d")
          
          # 生成标题
          RELEASE_NOTES="${VERSION} (${RELEASE_DATE})"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "${RELEASE_NOTES}" >> $GITHUB_ENV
          
          echo "" >> $GITHUB_ENV
          echo "Break Change:" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # 生成新功能列表
          echo "New feature:" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          if [ -n "$PREVIOUS_TAG" ]; then
            git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:"%s" | grep -E "^feat" | sed -E 's/^feat(\([^)]+\))?:[ ]*/• /' >> $GITHUB_ENV || echo "• support multiple instance service" >> $GITHUB_ENV
          else
            echo "• support multiple instance service" >> $GITHUB_ENV
          fi
          
          echo "" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          
          # 生成修复Bug列表
          echo "Bugs fixed:" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          if [ -n "$PREVIOUS_TAG" ]; then
            git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:"%s" | grep -E "^fix" | sed -E 's/^fix(\([^)]+\))?:[ ]*/• /' >> $GITHUB_ENV || echo "• recognize failed" >> $GITHUB_ENV
          else
            echo "• recognize failed" >> $GITHUB_ENV
          fi
          
          echo "EOF" >> $GITHUB_ENV
      
      - name: 创建发布
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: context.ref.replace('refs/tags/', ''),
              body: process.env.RELEASE_NOTES,
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 18

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 获取pnpm缓存路径
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 设置pnpm缓存
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: 安装依赖
        run: pnpm install

      - name: 构建应用
        run: pnpm run build

      - name: 构建 Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 仅当有设置密钥时才使用密钥
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          # 允许无签名构建
          args: --config tauri.conf.json

  updater:
    runs-on: ubuntu-latest
    needs: build-tauri
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 18

      - name: 安装pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: 安装依赖
        run: pnpm install

      - name: 运行更新器脚本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run updater

  publish-release:
    runs-on: ubuntu-latest
    needs: updater
    steps:
      - name: 发布发布
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            }) 
